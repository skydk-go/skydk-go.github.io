<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2021/08/08/nei-cun-tao-yi/"/>
      <url>/2021/08/08/nei-cun-tao-yi/</url>
      
        <content type="html"><![CDATA[<p>1、Go语言中如何处理函数内部定义的局部变量，我们现在在函数中定义两个局部变量</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token builtin">string</span> <span class="token punctuation">{</span>name <span class="token operator">:=</span> <span class="token string">"zhangsan"</span>p1 <span class="token operator">:=</span> <span class="token operator">&amp;</span>namefmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"*p1"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p1<span class="token punctuation">)</span>city <span class="token operator">:=</span> <span class="token string">"shanghai"</span>ptr <span class="token operator">:=</span> <span class="token operator">&amp;</span>city<span class="token keyword">return</span> ptr <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、在main函数中去调用局部变量</p><pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">func main() {p := TestPtr()fmt.Println("*p", *p)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3、完整程序如下所示</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>p <span class="token operator">:=</span> <span class="token function">TestPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"*p"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token builtin">string</span> <span class="token punctuation">{</span>name <span class="token operator">:=</span> <span class="token string">"zhangsan"</span>p1 <span class="token operator">:=</span> <span class="token operator">&amp;</span>namefmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"*p1"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p1<span class="token punctuation">)</span>city <span class="token operator">:=</span> <span class="token string">"shanghai"</span>ptr <span class="token operator">:=</span> <span class="token operator">&amp;</span>city<span class="token keyword">return</span> ptr <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、利用gcflags去捕捉编译信息，并将信息写入到1.txt文件中</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">go build -o test.exe --gcflags "-m -m -l" 内存逃逸.go &gt;1.txt 2&gt;&amp;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、结果如下，发现在堆栈上的局部变量逃逸到了堆内存上，而name变量并没有。</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt"># command-line-arguments.\内存逃逸.go:12:21: *p1 escapes to heap:.\内存逃逸.go:12:21:   flow: {storage for ... argument} = &amp;{storage for *p1}:.\内存逃逸.go:12:21:     from *p1 (spill) at .\内存逃逸.go:12:21.\内存逃逸.go:12:21:     from ... argument (slice-literal-element) at .\内存逃逸.go:12:13.\内存逃逸.go:12:21:   flow: {heap} = {storage for ... argument}:.\内存逃逸.go:12:21:     from ... argument (spill) at .\内存逃逸.go:12:13.\内存逃逸.go:12:21:     from fmt.Println(... argument...) (call parameter) at .\内存逃逸.go:12:13.\内存逃逸.go:12:14: "*p1" escapes to heap:.\内存逃逸.go:12:14:   flow: {storage for ... argument} = &amp;{storage for "*p1"}:.\内存逃逸.go:12:14:     from "*p1" (spill) at .\内存逃逸.go:12:14.\内存逃逸.go:12:14:     from ... argument (slice-literal-element) at .\内存逃逸.go:12:13.\内存逃逸.go:12:14:   flow: {heap} = {storage for ... argument}:.\内存逃逸.go:12:14:     from ... argument (spill) at .\内存逃逸.go:12:13.\内存逃逸.go:12:14:     from fmt.Println(... argument...) (call parameter) at .\内存逃逸.go:12:13.\内存逃逸.go:14:2: city escapes to heap:.\内存逃逸.go:14:2:   flow: ptr = &amp;city:.\内存逃逸.go:14:2:     from &amp;city (address-of) at .\内存逃逸.go:15:9.\内存逃逸.go:14:2:     from ptr := &amp;city (assign) at .\内存逃逸.go:15:6.\内存逃逸.go:14:2:   flow: ~r0 = ptr:.\内存逃逸.go:14:2:     from return ptr (return) at .\内存逃逸.go:16:2.\内存逃逸.go:14:2: moved to heap: city.\内存逃逸.go:12:13: ... argument does not escape.\内存逃逸.go:12:14: "*p1" escapes to heap.\内存逃逸.go:12:21: *p1 escapes to heap.\内存逃逸.go:7:20: *p escapes to heap:.\内存逃逸.go:7:20:   flow: {storage for ... argument} = &amp;{storage for *p}:.\内存逃逸.go:7:20:     from *p (spill) at .\内存逃逸.go:7:20.\内存逃逸.go:7:20:     from ... argument (slice-literal-element) at .\内存逃逸.go:7:13.\内存逃逸.go:7:20:   flow: {heap} = {storage for ... argument}:.\内存逃逸.go:7:20:     from ... argument (spill) at .\内存逃逸.go:7:13.\内存逃逸.go:7:20:     from fmt.Println(... argument...) (call parameter) at .\内存逃逸.go:7:13.\内存逃逸.go:7:14: "*p" escapes to heap:.\内存逃逸.go:7:14:   flow: {storage for ... argument} = &amp;{storage for "*p"}:.\内存逃逸.go:7:14:     from "*p" (spill) at .\内存逃逸.go:7:14.\内存逃逸.go:7:14:     from ... argument (slice-literal-element) at .\内存逃逸.go:7:13.\内存逃逸.go:7:14:   flow: {heap} = {storage for ... argument}:.\内存逃逸.go:7:14:     from ... argument (spill) at .\内存逃逸.go:7:13.\内存逃逸.go:7:14:     from fmt.Println(... argument...) (call parameter) at .\内存逃逸.go:7:13.\内存逃逸.go:7:13: ... argument does not escape.\内存逃逸.go:7:14: "*p" escapes to heap.\内存逃逸.go:7:20: *p escapes to heap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/06/go-xie-cheng-tui-chu-ce-shi/"/>
      <url>/2021/08/06/go-xie-cheng-tui-chu-ce-shi/</url>
      
        <content type="html"><![CDATA[<p>1、Go语言中利用go特性可以开启一个新的协程</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、在main函数中执行子协程</p><pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">func main(){go func()}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3、若main主协程比子协程先退出去，那么子协程会不会退出？</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 开启无线循环子协程</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>i <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token punctuation">{</span>i<span class="token operator">++</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"new goroutine: i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//主协程开启</span>i <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token punctuation">{</span>i<span class="token operator">++</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"main goroutine: i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">5</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、测试结果如下，发现主协程退出来后，子协程自动结束。</p><p><img src="C:\Users\sunwenbin\AppData\Roaming\Typora\typora-user-images\image-20210806155834431.png" alt="image-20210806155834431"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/c-zhi-er-cha-shu-de-qian-xu-bian-li-si-xiang-di-gui-ban-ben-xiang-guan-ti-mu-ti-jie-1/"/>
      <url>/2021/08/05/c-zhi-er-cha-shu-de-qian-xu-bian-li-si-xiang-di-gui-ban-ben-xiang-guan-ti-mu-ti-jie-1/</url>
      
        <content type="html"><![CDATA[<h2 id="题目来源于拼多多"><a href="#题目来源于拼多多" class="headerlink" title="题目来源于拼多多"></a>题目来源于拼多多</h2><p>多多鸡打算造一本自己的电子字典，里面的所有单词都只由a和b组成。<br>每个单词的组成里a的数量不能超过N个且b的数量不能超过M个。多多鸡的幸运数字是K，它打算把所有满足条件的单词里的字典序第K小的单词找出来，作为字典的封面。<br><img src="https://img-blog.csdnimg.cn/20200625194743277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjQ3Mjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>把其看为一个二叉树如下<br><img src="https://img-blog.csdnimg.cn/20200625195025896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjQ3Mjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码思路就来了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">Magic_box</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m,string tmp)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">                res.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">                <span class="built_in">Magic_box</span>(n<span class="number">-1</span>,m,tmp);</span><br><span class="line">                tmp.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(m!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp.<span class="built_in">push_back</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">                res.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">                 <span class="built_in">Magic_box</span>(n,m<span class="number">-1</span>,tmp);</span><br><span class="line">                 tmp.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Solution s;</span><br><span class="line">    string tmp=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> n,m,k;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    cin&gt;&gt;k;</span><br><span class="line">    <span class="keyword">auto</span> str=s.<span class="built_in">Magic_box</span>(n,m,tmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str[k<span class="number">-1</span>].<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;str[k<span class="number">-1</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/c-11-zhi-lambda-biao-da-shi-xue-xi/"/>
      <url>/2021/08/05/c-11-zhi-lambda-biao-da-shi-xue-xi/</url>
      
        <content type="html"><![CDATA[<ol><li>C++11中的Lambda表达式用于定义并创建匿名的函数对象。</li><li>Lambda表达式的基本构成：<br>最简单的lambda表达式如下<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[](参数<span class="number">1</span>,参数<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">函数实现的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Lambda表达式是从[]开始的，这部分必须存在，<strong>不能省略</strong>，[]里面可以带参数，参数有=，&amp;，this<br>（1）<strong>参数=表示</strong>数体内可以使用Lambda所在作用范围内所有可见的局部变量（包括Lambda所在类的this），并且是值传递方式（相当于编译器自动为我们按值传递了所有局部变量）。<br>（2）<strong>参数&amp;表示</strong>函数体内可以使用Lambda所在作用范围内所有可见的局部变量（包括Lambda所在类的this），并且是引用传递方式（相当于编译器自动为我们按引用传递了所有局部变量）。<br>（3）<strong>参数this表示</strong>函数体内可以使用Lambda所在类中的成员变量。</li><li>[]后面的（）是传递参数的位置，</li><li>{}则是函数体，函数实现的地方。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/c-cuo-wu-error-funciton-in-namespace-std-does-not-name-a-template-type/"/>
      <url>/2021/08/05/c-cuo-wu-error-funciton-in-namespace-std-does-not-name-a-template-type/</url>
      
        <content type="html"><![CDATA[<p>今天遇到这个问题，百度的解决方案全都是加头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functionl&gt;</span></span></span><br></pre></td></tr></table></figure><p>但是我加了，还是报这个错。<br>最后查到真正的原因时是gcc版本是98的，于是编译的时候需要加上-std=c++11</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ main.cpp  -std=c++<span class="number">11</span></span><br></pre></td></tr></table></figure><p>问题解决</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/c-zhi-neng-zhi-zhen-weak-ptr-de-xue-xi-bi-ji/"/>
      <url>/2021/08/05/c-zhi-neng-zhi-zhen-weak-ptr-de-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<ol><li>weak_ptr 智能指针是为了解决shared_ptr相互引用导致的死锁问题，它不控制对象的生命周期，不会增加对象的引用次数，和shared_ptr可以相互转化，是一种弱应用。<br>下面的代码就陷入了死锁，p1和p2相互引用导致计数一直为1，而对象得不到销毁。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Dog</span>()&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Nameless dog created.&quot;</span>&lt;&lt;endl;</span><br><span class="line">            s1=<span class="string">&quot;nameless&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Dog</span>(string name)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Dog is created:&quot;</span> &lt;&lt; name&lt;&lt;endl;</span><br><span class="line">            s1=name;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">makefriend</span><span class="params">(shared_ptr&lt;Dog&gt; f)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            ptr_friend=f;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Dog &quot;</span>&lt;&lt;s1&lt;&lt;<span class="string">&quot; rules. &quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        ~<span class="built_in">Dog</span>()&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Dog is destoryed:&quot;</span>&lt;&lt;s1&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        shared_ptr&lt;Dog&gt; ptr_friend;</span><br><span class="line">        string s1;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    shared_ptr&lt;Dog&gt; p1=make_shared&lt;Dog&gt;(<span class="string">&quot;dog1&quot;</span>);</span><br><span class="line">    shared_ptr&lt;Dog&gt; p2=make_shared&lt;Dog&gt;(<span class="string">&quot;dog2&quot;</span>);</span><br><span class="line">    p1-&gt;<span class="built_in">makefriend</span>(p2);</span><br><span class="line">    p2-&gt;<span class="built_in">makefriend</span>(p1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200324202731240.png" alt="在这里插入图片描述"><br>借助weak_ptr指针代码</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Dog</span>()&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Nameless dog created.&quot;</span>&lt;&lt;endl;</span><br><span class="line">            s1=<span class="string">&quot;nameless&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Dog</span>(string name)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Dog is created:&quot;</span> &lt;&lt; name&lt;&lt;endl;</span><br><span class="line">            s1=name;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">makefriend</span><span class="params">(shared_ptr&lt;Dog&gt; f)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            ptr_friend=f;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Dog &quot;</span>&lt;&lt;s1&lt;&lt;<span class="string">&quot; rules. &quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        ~<span class="built_in">Dog</span>()&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Dog is destoryed:&quot;</span>&lt;&lt;s1&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        weak_ptr&lt;Dog&gt; ptr_friend;<span class="comment">//此处设置为weak_ptr</span></span><br><span class="line">        string s1;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    shared_ptr&lt;Dog&gt; p1=make_shared&lt;Dog&gt;(<span class="string">&quot;dog1&quot;</span>);</span><br><span class="line">    shared_ptr&lt;Dog&gt; p2=make_shared&lt;Dog&gt;(<span class="string">&quot;dog2&quot;</span>);</span><br><span class="line">    p1-&gt;<span class="built_in">makefriend</span>(p2);</span><br><span class="line">    p2-&gt;<span class="built_in">makefriend</span>(p1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200324203737173.png" alt="在这里插入图片描述"><br>对象成功销毁。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/c-zhi-neng-zhi-zhen-shared-ptr-xue-xi-bi-ji/"/>
      <url>/2021/08/05/c-zhi-neng-zhi-zhen-shared-ptr-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<ol><li>C++智能指针shared_ptr实现的是，多个指针指向相同的对象，其释放的时机是最后一个引用被销毁时，当use_count()为0时被彻底释放。</li><li>我们可以调用release()释放资源所有权，计数减一。</li><li>shared_ptr容易引起死锁。</li><li>避免使用raw pointer</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Dog</span>()&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Nameless dog created.&quot;</span>&lt;&lt;endl;</span><br><span class="line">            s1=<span class="string">&quot;nameless&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Dog</span>(string name)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Dog is created:&quot;</span> &lt;&lt; name&lt;&lt;endl;</span><br><span class="line">            s1=name;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Dog &quot;</span>&lt;&lt;s1&lt;&lt;<span class="string">&quot; rules. &quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        ~<span class="built_in">Dog</span>()&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Dog is destoryed:&quot;</span>&lt;&lt;s1&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        string s1;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// shared_ptr&lt;Dog&gt; p(new Dog(&#x27;jinmao&#x27;));//count=1,可以用上面这一种方式</span></span><br><span class="line">    shared_ptr&lt;Dog&gt; p=make_shared&lt;Dog&gt;(<span class="string">&quot;jinmao&quot;</span>);<span class="comment">//count=1，这种方式更快更好。</span></span><br><span class="line">    cout&lt;&lt;p.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line">    &#123;</span><br><span class="line">    shared_ptr&lt;Dog&gt; p1=p;<span class="comment">//count=2</span></span><br><span class="line">     cout&lt;&lt;p.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line">    p1-&gt;<span class="built_in">foo</span>();<span class="comment">//count=1</span></span><br><span class="line">     cout&lt;&lt;p.<span class="built_in">use_count</span>()&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;<span class="built_in">foo</span>();</span><br><span class="line">     </span><br><span class="line">&#125;<span class="comment">//count=0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/c-zhi-neng-zhi-zhen-unique-ptr-xue-xi-bi-ji/"/>
      <url>/2021/08/05/c-zhi-neng-zhi-zhen-unique-ptr-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<ol><li>C++11特性里面引入了很多智能指针，其中就包括unique_ptr，智能指针的作用是管理一个指针以防止指针忘记释放而造成内存泄露。</li><li>unique_ptr是一个类，当超出了类的作用域，类会自动调用析构函数，析构函数会自动释放资源。其原理就是在函数结束时自动释放内存空间。</li><li>unique_ptr的头文件为memory</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Dog</span>()&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Nameless dog created.&quot;</span>&lt;&lt;endl;</span><br><span class="line">            s1=<span class="string">&quot;nameless&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Dog</span>(string name)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Dog is created:&quot;</span> &lt;&lt; name&lt;&lt;endl;</span><br><span class="line">            s1=name;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Dog &quot;</span>&lt;&lt;s1&lt;&lt;<span class="string">&quot; rules. &quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        ~<span class="built_in">Dog</span>()&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Dog is destoryed:&quot;</span>&lt;&lt;s1&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        string s1;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;Dog&gt; <span class="title">pd</span><span class="params">(<span class="keyword">new</span> Dog(<span class="string">&quot;jinmao&quot;</span>))</span></span>;</span><br><span class="line">    pd-&gt;<span class="built_in">foo</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无法同时用多个智能指针指向同一个对象，如下程序报错</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Dog</span>()&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Nameless dog created.&quot;</span>&lt;&lt;endl;</span><br><span class="line">            s1=<span class="string">&quot;nameless&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Dog</span>(string name)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Dog is created:&quot;</span> &lt;&lt; name&lt;&lt;endl;</span><br><span class="line">            s1=name;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Dog &quot;</span>&lt;&lt;s1&lt;&lt;<span class="string">&quot; rules. &quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        ~<span class="built_in">Dog</span>()&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Dog is destoryed:&quot;</span>&lt;&lt;s1&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        string s1;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;Dog&gt; <span class="title">pd</span><span class="params">(<span class="keyword">new</span> Dog(<span class="string">&quot;jinmao&quot;</span>))</span></span>;</span><br><span class="line">    unique_ptr&lt;Dog&gt; pd1;</span><br><span class="line">    pd1=pd;<span class="comment">//程序报错，应该保证同一时间内只有一个智能指针可以指向该对象</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/jin-cheng-he-xian-cheng-tong-xin-tong-bu-fang-shi-zong-jie/"/>
      <url>/2021/08/05/jin-cheng-he-xian-cheng-tong-xin-tong-bu-fang-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>进程同步方式：临界区，互斥量，信号量，事件。<br>线程同步方式：信号量，互斥量，条件变量。<br>进程通信方式:管道（普通管道和命名管道），消息队列，信号量，信号，共享内存,套接字。<br>线程通信方式：临界区，互斥量，信号量，事件。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/c-zhong-vscode-zhong-shi-yong-extern-chu-cuo-chu-li/"/>
      <url>/2021/08/05/c-zhong-vscode-zhong-shi-yong-extern-chu-cuo-chu-li/</url>
      
        <content type="html"><![CDATA[<p>1创建了两个cpp文件<br>第一个代码如下，第一个名字叫a.cpp,定义了两个全局变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a1=<span class="number">9</span>,a2=<span class="number">3</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二个代码叫b.cpp，用到了extern,目的是输出a.cpp的两个全局变量a1和a2</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> a1,a2;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;a1:&quot;</span>&lt;&lt;a1&lt;&lt;<span class="string">&quot;\na2:&quot;</span>&lt;&lt;a2&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是运行却出错了<br>    <img src="https://img-blog.csdnimg.cn/20200319103413421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjQ3Mjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>于是我把cout换成了printf去输出<br>还是报错如下<img src="https://img-blog.csdnimg.cn/2020031910373996.png" alt="在这里插入图片描述"><br>我看了我代码一百遍，没发现什么问题，我要崩溃了<br>于是抱着最后试一下的态度，我把代码从Vscode换到了Visual Studio 2017里面去运行，结果成功了。<img src="https://img-blog.csdnimg.cn/2020031910384567.png" alt="在这里插入图片描述"><br>虽说成功运行，但也不知道为啥子，真是玄学。<br><img src="https://img-blog.csdnimg.cn/20200319104456863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjQ3Mjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/c-qiu-er-cha-shu-shen-du-de-liang-chong-fang-fa/"/>
      <url>/2021/08/05/c-qiu-er-cha-shu-shen-du-de-liang-chong-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>今天在leetcode中碰到了求二叉树的深度问题，于是总结一下这两种方法</p><ol><li><strong>方法一</strong>是用递归的方法，<strong>方法二</strong>是借助队列和层序遍历的思想<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//构建二叉树</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">right</span>;</span></span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="keyword">int</span> x):<span class="built_in">val</span>(x),<span class="built_in">left</span>(<span class="literal">NULL</span>),<span class="built_in">right</span>(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法一:判断树不为空就一直遍历下去</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">TreeDepth</span><span class="params">(TreeNode* pRoot)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!pRoot) <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(<span class="number">1</span>+<span class="built_in">TreeDepth</span>(pRoot-&gt;left), <span class="number">1</span>+<span class="built_in">TreeDepth</span>(pRoot-&gt;right));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//方法二:利用层序遍历的思想，每一层都弹出队列，深度才加一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">TreeDepth</span><span class="params">(TreeNode* pRoot)</span></span></span><br><span class="line"><span class="function">    </span>&#123;    <span class="keyword">if</span>(pRoot==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">int</span> depth=<span class="number">0</span>;</span><br><span class="line">        TreeNode* p1=pRoot;</span><br><span class="line">        TreeNode* front;</span><br><span class="line">        queue&lt;TreeNode*&gt; q1;</span><br><span class="line">        q1.<span class="built_in">push</span>(p1);</span><br><span class="line">        <span class="keyword">while</span>(!q1.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;  </span><br><span class="line">         depth++;</span><br><span class="line">         <span class="keyword">int</span> size1=q1.<span class="built_in">size</span>();</span><br><span class="line">         <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">       <span class="comment">//每次弹出所有的队列元素，然后让深度加一//</span></span><br><span class="line">         <span class="keyword">while</span>(count&lt;size1)</span><br><span class="line">             &#123;</span><br><span class="line">                 front=q1.<span class="built_in">front</span>();</span><br><span class="line">                 q1.<span class="built_in">pop</span>();</span><br><span class="line">                 count++;</span><br><span class="line">                <span class="keyword">if</span>(front-&gt;left!=<span class="literal">NULL</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                    q1.<span class="built_in">push</span>(front-&gt;left);</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">if</span>(front-&gt;right!=<span class="literal">NULL</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                    q1.<span class="built_in">push</span>(front-&gt;right);</span><br><span class="line">                    &#125;</span><br><span class="line">             &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">     <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/guan-yu-c-guan-cha-zhe-mo-xing-de-xue-xi-he-li-jie/"/>
      <url>/2021/08/05/guan-yu-c-guan-cha-zhe-mo-xing-de-xue-xi-he-li-jie/</url>
      
        <content type="html"><![CDATA[<ol><li>观察者模式属于行为型模式中的一种，其作用是当一个对象的状态发生改变时，能够通知其他关联对象，自动刷新对象的状态，有点像马路上的车和红绿灯的关系，当红灯这个对象亮起的时候，小车应该是停下来的状态，在小灯变绿的时候，小车才是行驶的状态。小车里面的人监听灯的变化情况。</li><li>Talk is cheap(具体实现代码如下)<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Traffic_light</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//车里面的人（观察者）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People_car</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">People_car</span>(string name, Traffic_light *light)</span><br><span class="line">&#123;</span><br><span class="line">m_name = name;</span><br><span class="line">Light_state = light;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(string action)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Got it:&quot;</span> &lt;&lt; action &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">stringm_name;</span><br><span class="line">Traffic_light*Light_state;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交通状态灯</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Traffic_light</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(People_car *o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Notify</span><span class="params">(string action)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;People_car *&gt;::iterator it= v.<span class="built_in">begin</span>(); it!=v.<span class="built_in">end</span>(); it++ )</span><br><span class="line">&#123;</span><br><span class="line">(*it)-&gt;<span class="built_in">update</span>(action);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAction</span><span class="params">(string action)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_action = action;</span><br><span class="line"><span class="built_in">Notify</span>(m_action);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string m_action;</span><br><span class="line">vector&lt;People_car *&gt; v;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//被观察的对象</span></span><br><span class="line">Traffic_light *s1 = <span class="keyword">new</span> Traffic_light;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体的观察者 </span></span><br><span class="line">People_car *po1 = <span class="keyword">new</span> <span class="built_in">People_car</span>(<span class="string">&quot;A&quot;</span>, s1);</span><br><span class="line"></span><br><span class="line">s1-&gt;<span class="built_in">addObserver</span>(po1);</span><br><span class="line">s1-&gt;<span class="built_in">setAction</span>(<span class="string">&quot;red light&quot;</span>);</span><br><span class="line">s1-&gt;<span class="built_in">setAction</span>(<span class="string">&quot;green light&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/guan-yu-c-dan-li-mo-shi-e-han-shi-he-lan-han-shi-xue-xi-de-yi-xie-li-jie/"/>
      <url>/2021/08/05/guan-yu-c-dan-li-mo-shi-e-han-shi-he-lan-han-shi-xue-xi-de-yi-xie-li-jie/</url>
      
        <content type="html"><![CDATA[<p> <strong>1. 单例模式</strong><br>从字面意思就可以看出来单例模式是一个类只能创建一个实例对象，这种创建对象的方法带来的好处就是多线程开发中，初始化一次套接字，共享同一个资源，节省创建对象的时间，有些场景模式下，要求一个类只生成一个唯一的对象。单例模式又分为饿汉式和懒汉式单例模式。<br>它的基本实现步骤是<br>（1）先把构造函数私有化<br>（2）提供一个全局的静态方法（创建对象用）<br>（3）在类中定义一个静态指针，指向本类的变量的静态变量指针（访问静态方法）</p><p><strong>1.2懒汉式单例模式</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒汉式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Singelton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">Singelton</span>()<span class="comment">//第一步：构造函数私有化</span></span><br><span class="line">&#123;</span><br><span class="line">m_singer = <span class="literal">NULL</span>;</span><br><span class="line">m_count = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第一步：构造函数私有化\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> Singelton *<span class="title">getInstance</span><span class="params">()</span><span class="comment">//第二步：提供一个全局的静态方法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m_singer == <span class="literal">NULL</span> )  <span class="comment">//懒汉式：1 每次获取实例都要判断 </span></span><br><span class="line">&#123;</span><br><span class="line">m_singer = <span class="keyword">new</span> Singelton;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> m_singer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m_count: &quot;</span> &lt;&lt; m_count &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">static</span> Singelton *m_singer;<span class="comment">//第三步：在类中定义一个静态指针，指向本类的变量的静态变量指针 </span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singelton *Singelton::m_singer = <span class="literal">NULL</span>;  <span class="comment">//懒汉式 并没有创建单例对象</span></span><br><span class="line"><span class="keyword">int</span> Singelton::m_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Singelton *p1 = Singelton::<span class="built_in">getInstance</span>(); <span class="comment">//只有在使用的时候，才去创建对象。</span></span><br><span class="line">Singelton *p2 = Singelton::<span class="built_in">getInstance</span>();</span><br><span class="line"><span class="keyword">if</span> (p1 != p2)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;different object&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;same object&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">p1-&gt;<span class="built_in">printT</span>();</span><br><span class="line">p2-&gt;<span class="built_in">printT</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>1.1饿汉式单例模式</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Singelton2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">Singelton2</span>()<span class="comment">//第一步：构造函数私有化</span></span><br><span class="line">&#123;</span><br><span class="line">m_singer = <span class="literal">NULL</span>;</span><br><span class="line">m_count = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;构造函数私有化&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> Singelton2 *<span class="title">getInstance</span><span class="params">()</span><span class="comment">//第二步：提供全局的静态方法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_singer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">FreeInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m_singer != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_singer;</span><br><span class="line">m_singer = <span class="literal">NULL</span>;</span><br><span class="line">m_count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m_count: &quot;</span> &lt;&lt; m_count &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">static</span> Singelton2 *m_singer;<span class="comment">//第三步：定义静态指针</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singelton2 *Singelton2::m_singer = <span class="keyword">new</span> Singelton2; <span class="comment">//不管你创建不创建实例，均把实例new出来</span></span><br><span class="line"><span class="keyword">int</span> Singelton2::m_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Singelton2 *p1 = Singelton2::<span class="built_in">getInstance</span>(); <span class="comment">//只有在使用的时候，才去创建对象。</span></span><br><span class="line">Singelton2 *p2 = Singelton2::<span class="built_in">getInstance</span>();</span><br><span class="line"><span class="keyword">if</span> (p1 != p2)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;different obj&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;same obj&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">p1-&gt;<span class="built_in">printT</span>();</span><br><span class="line">p2-&gt;<span class="built_in">printT</span>();</span><br><span class="line">Singelton2::<span class="built_in">FreeInstance</span>();</span><br><span class="line">Singelton2::<span class="built_in">FreeInstance</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2总结</strong><br>多线程中会导致多个实例的产生，从而导致运行代码不正确以及内存的泄露。每次需要创建临界区，访问临界区需要加锁和解锁。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/guan-yu-c-chuang-jian-chou-xiang-gong-han-fang-fa-mo-shi-de-xue-xi-bi-ji/"/>
      <url>/2021/08/05/guan-yu-c-chuang-jian-chou-xiang-gong-han-fang-fa-mo-shi-de-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p> <strong>1. 抽象工厂方法模式与工厂方法模式的区别</strong></p><p>工厂方法模式是在简单工厂方法基础之上再加上开闭原则形成的一种设计模式，其创建对象时不用new创建对象，而是使用工厂来创建，我们只需要提供一个接口就能实现创建，但是工厂模式在创建对象时候太过于单一，它要么生产香蕉，要么生产鸭梨，但是不能做到同时生产这两种，也就是说不能生产一个产品组。而抽象工厂方法模式能够同时生产一个产品族。</p><p><strong>2.抽象工厂方法实现</strong><br>中国工厂负责同时生产中国内地的水果，而美国的工厂负责同时生产美国内地的水果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//水果类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShowName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;fruit\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//水果工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Fruit* <span class="title">getApple</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Fruit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Fruit* <span class="title">getBanana</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Fruit</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中国香蕉</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChinaBanana</span> :</span> <span class="keyword">public</span> Fruit</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShowName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;China Banana \n&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//中国苹果</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChinaApple</span> :</span> <span class="keyword">public</span> Fruit</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShowName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;China Apple \n&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//美国香蕉</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AmerciaBanana</span> :</span> <span class="keyword">public</span> Fruit</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShowName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Amercia Banana \n&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//美国苹果</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AmerciaApple</span> :</span> <span class="keyword">public</span> Fruit</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShowName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;America Apple \n&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//中国工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChinaFruitFactory</span> :</span> <span class="keyword">public</span> FruitFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Fruit* <span class="title">getApple</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ChinaApple</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Fruit* <span class="title">getBanana</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ChinaBanana</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//美国工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AmericaFruitFactory</span> :</span> <span class="keyword">public</span> FruitFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Fruit* <span class="title">getApple</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">AmerciaApple</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Fruit* <span class="title">getBanana</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">AmerciaBanana</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FruitFactory * ff  = <span class="literal">NULL</span>;</span><br><span class="line">Fruit *fruit = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ff = <span class="keyword">new</span> <span class="built_in">ChinaFruitFactory</span>();</span><br><span class="line">fruit = ff-&gt;<span class="built_in">getApple</span>();</span><br><span class="line">fruit-&gt;<span class="built_in">ShowName</span>();</span><br><span class="line">fruit = ff-&gt;<span class="built_in">getBanana</span>();</span><br><span class="line">fruit-&gt;<span class="built_in">ShowName</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> fruit;</span><br><span class="line"><span class="keyword">delete</span> ff;</span><br><span class="line"></span><br><span class="line">ff = <span class="keyword">new</span> <span class="built_in">AmericaFruitFactory</span>();</span><br><span class="line">fruit = ff-&gt;<span class="built_in">getApple</span>();</span><br><span class="line">fruit-&gt;<span class="built_in">ShowName</span>();</span><br><span class="line">fruit = ff-&gt;<span class="built_in">getBanana</span>();</span><br><span class="line">fruit-&gt;<span class="built_in">ShowName</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> fruit;</span><br><span class="line"><span class="keyword">delete</span> ff;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/guan-yu-c-shi-xian-gong-han-fang-fa-mo-shi-de-shi-xian-yu-li-jie/"/>
      <url>/2021/08/05/guan-yu-c-shi-xian-gong-han-fang-fa-mo-shi-de-shi-xian-yu-li-jie/</url>
      
        <content type="html"><![CDATA[<p> <strong>1. 工厂模式</strong><br>         按照我自己的理解就是一个工厂生产某一个产品的模式或者模板，它生产出来的产品都是一样的，比如说我想要一台电脑，我直接去工厂提货就行了，而我不用管这个电脑是如何生产出来的，也不需要管它的具体实现步骤。<br>        在面向对象编程的过程中，设计模式主要分为三大类分别是创建型模式，结构式模式，行为型模式，而工厂模式属于创建型模式，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。<br>        其优点是我如果想要创建一个对象，只需要知道对象的名称即可，工厂方法模式符合开闭原则，想要新增产品只需要扩展一个工厂类就行了。</p><p> <strong>2. 工厂模式实现</strong><br>    代码比较简单，其实现如下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象水果类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractFruit</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShowName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//苹果</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span>:</span><span class="keyword">public</span> AbstractFruit&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShowName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i am apple\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鸭梨</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pear</span>:</span><span class="keyword">public</span> AbstractFruit&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShowName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i am pear&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象工厂类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractFruitFactory</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> AbstractFruit* <span class="title">CreateFruit</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//苹果工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppleFactory</span>:</span><span class="keyword">public</span> AbstractFruitFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> AbstractFruit* <span class="title">CreateFruit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Apple;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鸭梨工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PearFactory</span>:</span><span class="keyword">public</span> AbstractFruitFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> AbstractFruit* <span class="title">CreateFruit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pear;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    AbstractFruitFactory* factory = <span class="literal">NULL</span>;</span><br><span class="line">    AbstractFruit* fruit = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个苹果工厂</span></span><br><span class="line">    factory = <span class="keyword">new</span> AppleFactory;</span><br><span class="line">    fruit = factory-&gt;<span class="built_in">CreateFruit</span>();</span><br><span class="line">    fruit-&gt;<span class="built_in">ShowName</span>();</span><br><span class="line">    <span class="keyword">delete</span> factory;</span><br><span class="line">    <span class="keyword">delete</span> fruit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个鸭梨工厂</span></span><br><span class="line">    factory = <span class="keyword">new</span> PearFactory;</span><br><span class="line">    fruit = factory-&gt;<span class="built_in">CreateFruit</span>();</span><br><span class="line">    fruit-&gt;<span class="built_in">ShowName</span>();</span><br><span class="line">    <span class="keyword">delete</span> factory;</span><br><span class="line">    <span class="keyword">delete</span> fruit;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/guan-yu-c-zhong-jing-tai-duo-tai-xing-he-dong-tai-duo-tai-xing-de-li-jie/"/>
      <url>/2021/08/05/guan-yu-c-zhong-jing-tai-duo-tai-xing-he-dong-tai-duo-tai-xing-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是多态性"><a href="#1-什么是多态性" class="headerlink" title="1. 什么是多态性"></a>1. 什么是多态性</h2><p><strong>1.0多态的简要介绍</strong>：多态中的态为<strong>形态</strong>的意思，在面向对象编程中<strong>是指向不同的对象发送同一个消息，不同的对象在接收时会产生不同的行为</strong>。举个例子通俗来讲就是：比如说开学了，校长把这个消息发送给了所有人，但是所有人都是一样的反应吗？老师的行为是我需要提前备好课，学生的行为是准备好作业去学校，家长需要筹集学费。然后按照其特性来又分为静态多态性和动态多态性这两种，那么这两种又有什么区别呢？</p><p><strong>1.1静态多态性</strong>：程序在<strong>编译时就确定</strong>了调用哪一个函数，一般都是通过函数重载和运算符重载来实现的。</p><p><strong>1.2动态多态性</strong>：不在编译时确定调用的是那一个函数，而是在运行过程中才动态指定要调用的函数。一般借助虚函数实现。</p><p><strong>1.3举个通俗点的例子</strong>：比如你要坐车去某一个地方，你有两种交通方式可以选择，一个是坐地铁去，另外一个是打出租车。坐地铁就是静态多态性，它需要你在坐上车前就确定去哪一个位置，不然就会坐错车到别的位置。而打出租车相当于动态多态性，你在坐车的过程中可以说去哪个位置，司机就会带你去那个位置。</p><h2 id="2-多态性的具体实现例子"><a href="#2-多态性的具体实现例子" class="headerlink" title="2. 多态性的具体实现例子"></a>2. 多态性的具体实现例子</h2><p> <strong>1. 静态多态性</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int add(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    int c=a+b;</span><br><span class="line">    return c;</span><br><span class="line">&#125;</span><br><span class="line">int add(int a, int b,int c)</span><br><span class="line">&#123;</span><br><span class="line">    int d=a+b+c;</span><br><span class="line">    return d;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int res1,res2;</span><br><span class="line">    res1=add(1,2);</span><br><span class="line">    res2=add(1,2,3);</span><br><span class="line">    cout&lt;&lt;&quot;res1:&quot;&lt;&lt;res1&lt;&lt;&quot;\nres2:&quot;&lt;&lt;res2&lt;&lt;endl;   </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>2. 动态多态性</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> &#123;</span></span><br><span class="line">   <span class="keyword">protected</span>:</span><br><span class="line">      <span class="keyword">int</span> width, height;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">Shape</span>( <span class="keyword">int</span> a=<span class="number">0</span>, <span class="keyword">int</span> b=<span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         width = a;</span><br><span class="line">         height = b;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">area</span><span class="params">()</span><span class="comment">//指定基类中的成员函数为虚函数实现多态性。</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         cout &lt;&lt; <span class="string">&quot;Parent class area :&quot;</span> &lt;&lt;endl;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span> <span class="keyword">public</span> Shape&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">Rectangle</span>( <span class="keyword">int</span> a=<span class="number">0</span>, <span class="keyword">int</span> b=<span class="number">0</span>):<span class="built_in">Shape</span>(a, b) &#123; &#125;</span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">area</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123; </span><br><span class="line">         cout &lt;&lt; <span class="string">&quot;Rectangle class area :&quot;</span> &lt;&lt;endl;</span><br><span class="line">         <span class="keyword">return</span> (width * height); </span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span>:</span> <span class="keyword">public</span> Shape&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">Triangle</span>( <span class="keyword">int</span> a=<span class="number">0</span>, <span class="keyword">int</span> b=<span class="number">0</span>):<span class="built_in">Shape</span>(a, b) &#123; &#125;</span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">area</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123; </span><br><span class="line">         cout &lt;&lt; <span class="string">&quot;Triangle class area :&quot;</span> &lt;&lt;endl;</span><br><span class="line">         <span class="keyword">return</span> (width * height / <span class="number">2</span>); </span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Shape *shape;</span><br><span class="line">   <span class="function">Rectangle <span class="title">rec</span><span class="params">(<span class="number">10</span>,<span class="number">7</span>)</span></span>;</span><br><span class="line">   <span class="function">Triangle  <span class="title">tri</span><span class="params">(<span class="number">10</span>,<span class="number">5</span>)</span></span>;</span><br><span class="line">   shape = &amp;rec;</span><br><span class="line">   shape-&gt;<span class="built_in">area</span>();</span><br><span class="line">   shape = &amp;tri;</span><br><span class="line">   shape-&gt;<span class="built_in">area</span>();</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/xue-xi-guo-cheng-zhong-dui-hui-diao-han-shu-de-li-jie/"/>
      <url>/2021/08/05/xue-xi-guo-cheng-zhong-dui-hui-diao-han-shu-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="1-函数指针和指针函数的理解"><a href="#1-函数指针和指针函数的理解" class="headerlink" title="1. 函数指针和指针函数的理解"></a>1. 函数指针和指针函数的理解</h2><p>这两者的关系总容易弄混淆<br>1.1指针函数：其实质还是一个函数，只不过它的返回值是一个指针。</p><p>指针函数声明格式为：类型标识符 *函数名(参数表)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">fun</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.2函数指针：其实质是一个指针，存储函数地址信息的一个变量。<br>声明格式：类型说明符 (*函数名) (参数)。一定要加上括号。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in"><span class="keyword">int</span></span> (*fun)(<span class="keyword">int</span> x)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-回调函数的场景与应用"><a href="#2-回调函数的场景与应用" class="headerlink" title="2. 回调函数的场景与应用"></a>2. 回调函数的场景与应用</h2><p>2.1回调函数的定义：<br>        回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应。这个是百度百科给的定义。<br>        通俗点来讲就是：我们有2个人，分别是店长，进货员。店长相当于是回调函数，进货员相当于是被调用的函数，当店里面需要进货时，由店长通知进货员进货，进货员收到通知后，把货物送到店长这里。</p><p>其声明格式如下：<br>类型标识符 函数名(函数指针，被调用函数的参数) </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">callback</span><span class="params">(<span class="keyword">int</span> (*fuc)(<span class="keyword">int</span>),fuc_data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-如何使用回调函数"><a href="#3-如何使用回调函数" class="headerlink" title="3. 如何使用回调函数"></a>3. 如何使用回调函数</h2><p>一个简单的用例帮助大家理解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fuc_call</span><span class="params">(<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;货物%d已经送到\n&quot;</span>,data);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">callback</span><span class="params">(<span class="keyword">int</span> (*fuc)(<span class="keyword">int</span>),<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;店里缺货物%d,快送货过来\n&quot;</span>,data);</span><br><span class="line"><span class="built_in">fuc</span>(data);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">callback</span>(fuc_call,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/c-shu-ju-jie-gou-dan-lian-biao-xue-xi-guo-cheng-zhong-yu-dao-de-wen-ti/"/>
      <url>/2021/08/05/c-shu-ju-jie-gou-dan-lian-biao-xue-xi-guo-cheng-zhong-yu-dao-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="1头结点与头指针的关系"><a href="#1头结点与头指针的关系" class="headerlink" title="1头结点与头指针的关系"></a>1头结点与头指针的关系</h2><p>1.1链表的定义：由一堆包含两个部分的结点链接而成的数据结构，两个部分分别存储的是当前结点地址信息的指针域和存储数据元素的数据域。</p><p>1.2头指针定义：通常使用“头指针”来标识一个链表，如单链表L，头指针为NULL的时表示一个空链表。</p><p>1.3头结点定义：在单链表的第一个结点之前附加一个结点，称为头结点。头结点的Data域可以不设任何信息，也可以记录表长等相关信息。</p><p>1.4两者之间的关系：头指针永远指向的是链表的第一个结点，无论这个链表是否具有头结点。</p><h2 id="2如何使用头插法创建一个链表"><a href="#2如何使用头插法创建一个链表" class="headerlink" title="2如何使用头插法创建一个链表"></a>2如何使用头插法创建一个链表</h2><p>头插法实现步骤<br><img src="https://img-blog.csdnimg.cn/20200309185223650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjQ3Mjc2,size_16,color_FFFFFF,t_70" alt="头插法过程"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="keyword">int</span> x) :</span><br><span class="line">        <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    ListNode* pp=<span class="literal">NULL</span>;</span><br><span class="line">    ListNode *head=(ListNode *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(ListNode));</span><br><span class="line">    ListNode *node=<span class="literal">NULL</span>;</span><br><span class="line">    head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        node=<span class="keyword">new</span> <span class="built_in">ListNode</span>(i);</span><br><span class="line">      <span class="comment">// node=(ListNode*)malloc(sizeof(ListNode));</span></span><br><span class="line">        std::cin&gt;&gt;a;</span><br><span class="line">        node-&gt;val=a;<span class="comment">//头插法实现代码</span></span><br><span class="line">        node-&gt;next=head-&gt;next;</span><br><span class="line">        head-&gt;next=node;<span class="comment">//结束代码</span></span><br><span class="line">    &#125;&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>尾插法比较简单,代码实现起来也比较容易</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="keyword">int</span> x) :</span><br><span class="line">        <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *head=(ListNode *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(ListNode));</span><br><span class="line">    ListNode *node=<span class="literal">NULL</span>;</span><br><span class="line">    ListNode *L=head;</span><br><span class="line">    head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        node =<span class="keyword">new</span> <span class="built_in">ListNode</span>(i);</span><br><span class="line">        std:cin&gt;&gt;a;</span><br><span class="line">        node-&gt;val=a;</span><br><span class="line">        L-&gt;next=node;</span><br><span class="line">        L=L-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/c-zhi-er-cha-shu-de-qian-xu-bian-li-si-xiang-di-gui-ban-ben-xiang-guan-ti-mu-ti-jie/"/>
      <url>/2021/08/05/c-zhi-er-cha-shu-de-qian-xu-bian-li-si-xiang-di-gui-ban-ben-xiang-guan-ti-mu-ti-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="题目来源于拼多多"><a href="#题目来源于拼多多" class="headerlink" title="题目来源于拼多多"></a>题目来源于拼多多</h2><p>多多鸡打算造一本自己的电子字典，里面的所有单词都只由a和b组成。<br>每个单词的组成里a的数量不能超过N个且b的数量不能超过M个。多多鸡的幸运数字是K，它打算把所有满足条件的单词里的字典序第K小的单词找出来，作为字典的封面。<br><img src="https://img-blog.csdnimg.cn/20200625194743277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjQ3Mjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>把其看为一个二叉树如下<br><img src="https://img-blog.csdnimg.cn/20200625195025896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjQ3Mjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码思路就来了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">Magic_box</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m,string tmp)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">                res.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">                <span class="built_in">Magic_box</span>(n<span class="number">-1</span>,m,tmp);</span><br><span class="line">                tmp.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(m!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp.<span class="built_in">push_back</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">                res.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">                 <span class="built_in">Magic_box</span>(n,m<span class="number">-1</span>,tmp);</span><br><span class="line">                 tmp.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Solution s;</span><br><span class="line">    string tmp=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> n,m,k;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    cin&gt;&gt;k;</span><br><span class="line">    <span class="keyword">auto</span> str=s.<span class="built_in">Magic_box</span>(n,m,tmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str[k<span class="number">-1</span>].<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;str[k<span class="number">-1</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/c-zhi-zi-fu-chuan-xiang-guan-wen-ti-bian-li-ji-jie-fa/"/>
      <url>/2021/08/05/c-zhi-zi-fu-chuan-xiang-guan-wen-ti-bian-li-ji-jie-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="题目忘记是哪个公司的真题了，问题很经典"><a href="#题目忘记是哪个公司的真题了，问题很经典" class="headerlink" title="题目忘记是哪个公司的真题了，问题很经典"></a>题目忘记是哪个公司的真题了，问题很经典</h2><p>一个重复字符串是由两个相同的字符串首尾拼接而成，例如abcabc便是长度为6的一个重复字符串，而abcba则不存在重复字符串。给定任意字符串，请帮小强找出其中的最长重复子串。</p><p><strong>解题思路：</strong>  采用暴力解法，提供给大家，思路贼暴力，就是两次遍历，每次碰到s[i]和s[j]相同的情况就用while判断两个字符串是不是相同的。这个代码应该还可以优化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_string</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max_res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;s.<span class="built_in">size</span>();j++)</span><br><span class="line">             &#123;</span><br><span class="line">                 <span class="keyword">if</span>(s[j]==s[i])</span><br><span class="line">                 &#123;</span><br><span class="line">                    <span class="keyword">int</span> f1=i,f2=j;</span><br><span class="line">                     <span class="keyword">while</span>(f1&lt;j &amp;&amp; f2&lt;s.<span class="built_in">size</span>())</span><br><span class="line">                     &#123;</span><br><span class="line">                         <span class="keyword">if</span>(s[f1]!=s[f2])</span><br><span class="line">                         &#123;</span><br><span class="line">                             <span class="keyword">break</span>;</span><br><span class="line">                         &#125;</span><br><span class="line">                         <span class="keyword">else</span></span><br><span class="line">                         &#123;</span><br><span class="line">                             f1++;</span><br><span class="line">                             f2++;</span><br><span class="line">                         &#125;</span><br><span class="line">                          </span><br><span class="line">                     &#125;</span><br><span class="line">                    <span class="keyword">if</span>(f1==j &amp;&amp;max_res&lt;j-i)</span><br><span class="line">                     max_res=j-i;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*max_res;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Solution S2;</span><br><span class="line">    string s1;</span><br><span class="line">    <span class="built_in">getline</span>(cin,s1);</span><br><span class="line">    <span class="keyword">auto</span> len=S2.<span class="built_in">get_string</span>(s1);</span><br><span class="line">    cout&lt;&lt;len&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/c-zhi-dong-tai-gui-hua-si-xiang-ti-mu-ji-jie-ti-si-lu/"/>
      <url>/2021/08/05/c-zhi-dong-tai-gui-hua-si-xiang-ti-mu-ji-jie-ti-si-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="题目如下"><a href="#题目如下" class="headerlink" title="题目如下"></a>题目如下</h2><p> 薯队长写了n篇笔记，编号从1~n,每篇笔记都获得了不少点赞数。<br>薯队长想从中选出一些笔记，作一个精选集合。挑选的时候有两个规则：<br>1.不能出现连续编号的笔记。<br>2.总点赞总数最多<br>如果满足1，2条件有多种方案，挑选笔记总数最少的那种。</p><p><strong>题目思路：</strong> 动态规划思想。 dp[i]表示前i篇笔记点赞总数最多。cnt[i]表示笔记的笔记总数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">notebook</span><span class="params">(<span class="keyword">int</span> n,vector&lt;<span class="keyword">int</span>&gt; nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>()&lt;=<span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">cnt</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(nums[<span class="number">0</span>]);</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="built_in">max</span>(nums[<span class="number">0</span>],nums[<span class="number">1</span>]));</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>]=nums[<span class="number">0</span>];</span><br><span class="line">        cnt[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>]=nums[<span class="number">1</span>];</span><br><span class="line">        cnt[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i<span class="number">-1</span>]&gt;dp[i<span class="number">-2</span>]+nums[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i]=dp[i<span class="number">-1</span>];</span><br><span class="line">                cnt[i]=cnt[i<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                dp[i]=dp[i<span class="number">-2</span>]+nums[i];</span><br><span class="line">                cnt[i]=cnt[i<span class="number">-2</span>]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max_dp=dp[<span class="number">0</span>],min_cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i]&gt;max_dp)</span><br><span class="line">            &#123;</span><br><span class="line">                max_dp=dp[i];</span><br><span class="line">                min_cnt=cnt[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(dp[i]=max_dp &amp;&amp; cnt[i]&lt;min_cnt)</span><br><span class="line">            &#123;</span><br><span class="line">                min_cnt=cnt[i];</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">push_back</span>(max_dp);</span><br><span class="line">        res.<span class="built_in">push_back</span>(min_cnt);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Solution s;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; nums;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    std::cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;  </span><br><span class="line">        cin&gt;&gt;m;</span><br><span class="line">        nums.<span class="built_in">push_back</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> a=s.<span class="built_in">notebook</span>(n,nums);</span><br><span class="line">    cout&lt;&lt;a[<span class="number">0</span>]&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/c-zhi-li-yong-ha-xi-biao-jie-jue-string-xiang-guan-wen-ti-ji-jie-da/"/>
      <url>/2021/08/05/c-zhi-li-yong-ha-xi-biao-jie-jue-string-xiang-guan-wen-ti-ji-jie-da/</url>
      
        <content type="html"><![CDATA[<h2 id="题目如下"><a href="#题目如下" class="headerlink" title="题目如下"></a>题目如下</h2><p>请编码实现一个命令行工具，判定两个指定的字符串是否异构同质；异构同质的定义为：一个字符串的字符重新排列后，能变成另一个字符串。</p><p>比如abc和acb就是异构同质。</p><p><strong>思路如下：</strong> 先用一个哈希表去记录某一个字符串的所有字符和个数，然后遍历第二个字符串，如果遍历的过程中没发现，就返回错误。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">solution</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">same_str</span><span class="params">(string s1,string s2)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line">            <span class="keyword">int</span> len1=s1.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">int</span> len2=s2.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">if</span>(len1!=len2) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.<span class="built_in">size</span>();i++)</span><br><span class="line">            &#123;</span><br><span class="line">                mp[s1[i]]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len2;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(mp.<span class="built_in">count</span>(s2[i])==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    mp[s2[i]]--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1;</span><br><span class="line">    string s2;</span><br><span class="line">    cin&gt;&gt;s1;</span><br><span class="line">    cin&gt;&gt;s2;</span><br><span class="line">    solution s;</span><br><span class="line">    <span class="keyword">auto</span> res=s.<span class="built_in">same_str</span>(s1,s2);</span><br><span class="line">    <span class="keyword">if</span>(res==<span class="number">1</span>)</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;true&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;fasle&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/c-zhi-dong-tai-gui-hua-si-xiang-zhi-da-yin-zi-fu-chuan-zhi-zui-chang-zi-chuan-ti-jie/"/>
      <url>/2021/08/05/c-zhi-dong-tai-gui-hua-si-xiang-zhi-da-yin-zi-fu-chuan-zhi-zui-chang-zi-chuan-ti-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="最长公共子串的变体，题目如下。"><a href="#最长公共子串的变体，题目如下。" class="headerlink" title="最长公共子串的变体，题目如下。"></a>最长公共子串的变体，题目如下。</h2><p>命令行工具接收两个字符串参数。输入字符串的合法字符集为[a-zA-Z0-9]，大小写敏感，无需考虑异常输入场景。所找到的公共子串；如果存在多个等长的公共子串，则请按字母序排序，依次打印出所有公共子串，每行一个。<br><strong>解题思路:</strong> 与我们平常接触的最长公共子串题目不一样，这个题目要求我们打印出来所有的最长子串并排序，思路是利用动态规划，但是我们dp数组保存的变成了字符串s1第i位结束和s2第j位结束的最大值，这样我们再遍历dp数组就可以得到全部最长公共子串了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">solution</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">longest_str</span><span class="params">(string s1,string s2)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">          vector&lt;string&gt; res;</span><br><span class="line">          <span class="keyword">int</span> m=s1.<span class="built_in">size</span>();</span><br><span class="line">          <span class="keyword">int</span> n=s2.<span class="built_in">size</span>();</span><br><span class="line">          <span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">          vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(m,vector&lt;<span class="keyword">int</span>&gt;(n));</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)dp[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)dp[<span class="number">0</span>][j]=<span class="number">0</span>;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="keyword">if</span>(s1[i]==s2[j])</span><br><span class="line">                  &#123;</span><br><span class="line">                      dp[i][j]=dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">                      <span class="keyword">if</span>(dp[i][j]&gt;max)max=dp[i][j];</span><br><span class="line">                  &#125; </span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[i][j]==max)</span><br><span class="line">                &#123;</span><br><span class="line">                    string tmp;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=i-max+<span class="number">1</span>;k&lt;=i;k++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        tmp.<span class="built_in">push_back</span>(s1[k]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">                &#125;</span><br><span class="line">              </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1;</span><br><span class="line">    string s2;</span><br><span class="line">    cin&gt;&gt;s1;</span><br><span class="line">    cin&gt;&gt;s2;</span><br><span class="line">    solution s;</span><br><span class="line">    <span class="keyword">auto</span> res=s.<span class="built_in">longest_str</span>(s1,s2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/c-zhi-dong-tai-gui-hua-si-xiang-lu-jing-fang-fa-xiang-guan-ti-mu-ji-ti-jie/"/>
      <url>/2021/08/05/c-zhi-dong-tai-gui-hua-si-xiang-lu-jing-fang-fa-xiang-guan-ti-mu-ji-ti-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述如下"><a href="#题目描述如下" class="headerlink" title="题目描述如下"></a>题目描述如下</h2><p>shopee的办公室非常大，小虾同学的位置坐落在右上角，而大门却在左下角，可以把所有位置抽象为一个网格（门口的坐标为0，0），小虾同学很聪明，每次只向上，或者向右走，因为这样最容易接近目的地，但是小虾同学不想让自己的boss们看到自己经常在他们面前出没，或者迟到被发现。他决定研究一下如果他不通过boss们的位置，他可以有多少种走法？</p><p><strong>思路如下</strong>  转移方程dp[i][j]表示到达第（i，j）个位置需要多少种走法，遇到Boss位置的时候，把走法设置为0。然后利用转移方程dp[i][j]=dp[i-1][j]+dp[i][j-1]种走法。</p><p><img src="https://img-blog.csdnimg.cn/20200626103947908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjQ3Mjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt;&gt;&amp; Map, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=x; ++i)</span><br><span class="line">        Map[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=y; ++j)</span><br><span class="line">        Map[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=x; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=y; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Map[i][j] == <span class="number">-1</span>)</span><br><span class="line">                Map[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                Map[i][j] = Map[i<span class="number">-1</span>][j] + Map[i][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Map[x][y];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y, n;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;y&gt;&gt;n;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt;&gt; <span class="built_in">Map</span>(x+<span class="number">1</span>, vector&lt;<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt;(y+<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">int</span> x0, y0;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        cin&gt;&gt;x0&gt;&gt;y0;</span><br><span class="line">        Map[x0][y0] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ans =<span class="number">0</span>;</span><br><span class="line">    ans = <span class="built_in">dfs</span>(Map, x, y);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/c-zhi-shou-si-lru-suan-fa-jie-gou/"/>
      <url>/2021/08/05/c-zhi-shou-si-lru-suan-fa-jie-gou/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述如下"><a href="#问题描述如下" class="headerlink" title="问题描述如下"></a>问题描述如下</h2><p>设计一个数据结构，实现LRU Cache的功能(Least Recently Used – 最近最少使用缓存)。它支持如下2个操作： get 和 put。</p><p>int get(int key) – 如果key已存在，则返回key对应的值value（始终大于0）；如果key不存在，则返回-1。<br>void put(int key, int value) – 如果key不存在，将value插入；如果key已存在，则使用value替换原先已经存在的值。如果容量达到了限制，LRU Cache需要在插入新元素之前，将最近最少使用的元素删除。</p><p>请特别注意“使用”的定义：新插入或获取key视为被使用一次；而将已经存在的值替换更新，不算被使用。</p><p><strong>输入和输出描述：</strong><br><img src="https://img-blog.csdnimg.cn/20200626214031584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjQ3Mjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>代码思路</strong> 利用哈希表和链表，哈希表用来查找元素，链表用来存储元素，链表的最开始一位表示最近未使用的值，最后一位表示最近刚使用的值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> &#123;</span></span><br><span class="line">    list&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; l;</span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>, list&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;::iterator&gt; mp;</span><br><span class="line">    <span class="keyword">unsigned</span> capacity;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LRUCache</span>(<span class="keyword">unsigned</span> cap) : <span class="built_in">capacity</span>(cap) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mp.<span class="built_in">count</span>(key)) &#123;</span><br><span class="line">            <span class="keyword">auto</span> it = mp[key];</span><br><span class="line">            l.<span class="built_in">splice</span>(l.<span class="built_in">end</span>(), l, it);</span><br><span class="line">            <span class="keyword">return</span> it-&gt;second;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mp.<span class="built_in">count</span>(key)) &#123;</span><br><span class="line">            mp[key]-&gt;second = value;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (capacity) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mp.<span class="built_in">size</span>() == capacity) &#123;</span><br><span class="line">                mp.<span class="built_in">erase</span>(l.<span class="built_in">begin</span>()-&gt;first);</span><br><span class="line">                l.<span class="built_in">erase</span>(l.<span class="built_in">begin</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            mp[key] = l.<span class="built_in">insert</span>(l.<span class="built_in">end</span>(), <span class="built_in">make_pair</span>(key, value));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> capacity, x, y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;capacity);</span><br><span class="line">    <span class="function">LRUCache <span class="title">cache</span><span class="params">(<span class="keyword">unsigned</span>(capacity &lt; <span class="number">0</span> ? <span class="number">0</span> : capacity))</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> op[<span class="number">4</span>]; <span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>, op, &amp;x) != EOF; ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*op == <span class="string">&#x27;g&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, cache.<span class="built_in">get</span>(x));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;y);</span><br><span class="line">            cache.<span class="built_in">put</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/c-zhi-wei-yun-suan-xiang-guan-ti-mu-ji-ti-jie/"/>
      <url>/2021/08/05/c-zhi-wei-yun-suan-xiang-guan-ti-mu-ji-ti-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="题目如下"><a href="#题目如下" class="headerlink" title="题目如下"></a>题目如下</h2><p><img src="https://img-blog.csdnimg.cn/202006271421376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjQ3Mjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>思路解法;</strong> 我们利用位运算，n和n-1相与，之后的结果就是n的二进制的1会少一个。当n为0的时候结束。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">len_num</span><span class="params">(<span class="keyword">long</span> <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> count;</span><br><span class="line">            <span class="keyword">while</span>(n!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">                n=n&amp;(n<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    solution s;</span><br><span class="line">    <span class="keyword">int</span> res=s.<span class="built_in">len_num</span>(n);</span><br><span class="line">    cout&lt;&lt;res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/c-zhi-leetcode-shua-ti-bi-ji-zhi-dui-zhan/"/>
      <url>/2021/08/05/c-zhi-leetcode-shua-ti-bi-ji-zhi-dui-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="题目来源leetcode42题"><a href="#题目来源leetcode42题" class="headerlink" title="题目来源leetcode42题"></a>题目来源leetcode42题</h2><p><a href="https://leetcode-cn.com/problems/trapping-rain-water/">https://leetcode-cn.com/problems/trapping-rain-water/</a><br><img src="https://img-blog.csdnimg.cn/20200629151013717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjQ3Mjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200629151110124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjQ3Mjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>解题思路：我没用到堆栈(感觉太麻烦)，这个题目直接遍历整个数组就行了，代码挺简单的，应该能看懂哈。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=height.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(len&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> current=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(height[i]&lt;height[current])</span><br><span class="line">            &#123;</span><br><span class="line">                res+=height[current]-height[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                current=i;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> j=len<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(current!=len<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i!=current;i--)</span><br><span class="line">            &#123;</span><br><span class="line">                res-=height[current]-height[i];</span><br><span class="line">                 <span class="keyword">if</span>(height[i]&lt;height[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    res+=height[j]-height[i];</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    j=i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/c-zhi-dan-diao-zhan-si-xiang-ji-ti-jie-si-lu/"/>
      <url>/2021/08/05/c-zhi-dan-diao-zhan-si-xiang-ji-ti-jie-si-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="题目来源Leetcode84题"><a href="#题目来源Leetcode84题" class="headerlink" title="题目来源Leetcode84题"></a>题目来源Leetcode84题</h2><p><a href="https://leetcode-cn.com/problems/largest-rectangle-in-histogram/">https://leetcode-cn.com/problems/largest-rectangle-in-histogram/</a><br><img src="https://img-blog.csdnimg.cn/20200629202948924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjQ3Mjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>思路一</strong>：暴力法，求出每个组合矩形的面积，然后比较大小。<br><strong>思路二</strong>：单调栈法，求以每个柱子为高的最大面积，遍历柱子，矩形的宽度边界即为向左找到第一个高度小于当前柱体 i 的柱体，向右找到第一个高度小于当前柱体 i 的柱体。对于每个柱子我们都如上计算一遍以当前柱子作为高的矩形面积，最终比较出最大的矩形面积即可。<br><img src="https://img-blog.csdnimg.cn/20200629203420235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjQ3Mjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        stack&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(heights.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxArea = heights[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        heights.<span class="built_in">push_back</span>(<span class="number">0</span>);   <span class="comment">//设置末尾边界</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; heights.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(!st.<span class="built_in">empty</span>() &amp;&amp; heights[i] &lt; heights[st.<span class="built_in">top</span>()])&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> top_index = st.<span class="built_in">top</span>();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//右边第一个比heights[st.top()]小的元素</span></span><br><span class="line">                <span class="keyword">int</span> right = i;</span><br><span class="line"></span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="comment">//左边第一个比heights[st.top()]小的元素</span></span><br><span class="line">                <span class="keyword">int</span> left = st.<span class="built_in">empty</span>() ? <span class="number">-1</span> : st.<span class="built_in">top</span>();<span class="comment">//注意无左边界的情况</span></span><br><span class="line"></span><br><span class="line">                maxArea = <span class="built_in">max</span>(maxArea, heights[top_index] * (right - left - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            st.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> maxArea;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/c-zhi-shou-si-yin-yong-ji-shu-de-zhi-neng-zhi-zhen/"/>
      <url>/2021/08/05/c-zhi-shou-si-yin-yong-ji-shu-de-zhi-neng-zhi-zhen/</url>
      
        <content type="html"><![CDATA[<p>1、实现多个智能指针指向同一个资源，不会造成指针失效，也不会造成资源被多次释放。<br>2、缺点是多线程环境下，不安全，需要加锁。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefCnt</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">RefCnt</span>(T *ptr = <span class="literal">nullptr</span>) : <span class="built_in">mptr</span>(ptr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (mptr != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">RefCnt</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (count = <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> mptr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addref</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span>  <span class="title">cutref</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  count--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    T *mptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Smart_ptr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Smart_ptr</span>(T *ptr = <span class="literal">nullptr</span>) : <span class="built_in">Ptr</span>(ptr)</span><br><span class="line">    &#123;</span><br><span class="line">        refcnt = <span class="keyword">new</span> RefCnt&lt;T&gt;(ptr); <span class="comment">//给此处的ptr建立引用计数</span></span><br><span class="line">    &#125;;</span><br><span class="line">    T *<span class="keyword">operator</span>-&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Ptr;</span><br><span class="line">        refcnt = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    T &amp;<span class="keyword">operator</span>*()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *Ptr;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Smart_ptr</span>()</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">if</span>(<span class="number">0</span>==refcnt-&gt;<span class="built_in">cutref</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> Ptr;</span><br><span class="line">        &#125;</span><br><span class="line">        Ptr=<span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Smart_ptr</span>(<span class="keyword">const</span> Smart_ptr&lt;T&gt; &amp;src) : <span class="built_in">Ptr</span>(src), <span class="built_in">refcnt</span>(src.refcnt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Ptr != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            refcnt-&gt;<span class="built_in">addref</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Smart_ptr&lt;T&gt; &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> Smart_ptr&lt;T&gt; &amp;src)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>==&amp;src)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Ptr=src.Ptr;</span><br><span class="line">        refcnt=src.refcnt;</span><br><span class="line">        refcnt-&gt;<span class="built_in">addref</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T *Ptr;</span><br><span class="line">    RefCnt&lt;T&gt;* refcnt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;fun&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Smart_ptr&lt;test&gt; <span class="title">ptr</span><span class="params">(<span class="keyword">new</span> test)</span></span>;</span><br><span class="line">    Smart_ptr&lt;test&gt; p2;</span><br><span class="line">        Smart_ptr&lt;test&gt; p3;</span><br><span class="line">    p2=ptr;</span><br><span class="line">    p3=p2;</span><br><span class="line">    p2-&gt;<span class="built_in">fun</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08/05/go-zhong-context-yong-fa/"/>
      <url>/2021/08/05/go-zhong-context-yong-fa/</url>
      
        <content type="html"><![CDATA[<ol><li><strong>Go中context的用法：控制子协程主动结束退出</strong></li></ol><p>Background()和TODO()<br>Go内置两个函数：Background()和TODO()，这两个函数分别返回一个实现了Context接口的background和todo。我们代码中最开始都是以这两个内置的上下文对象作为最顶层的partent context，<strong>衍生出更多的子上下文对象</strong>。</p><p><strong>Background()主要用于main函数、初始化以及测试代码中，作为Context这个树结构的最顶层的Context，也就是根Context。</strong></p><p><strong>TODO()，它目前还不知道具体的使用场景，如果我们不知道该使用什么Context的时候，可以使用这个。</strong></p><p>background和todo本质上都是emptyCtx结构体类型，是一个不可取消，没有设置截止时间，没有携带任何值的Context。</p><p>（1）程序中有多个协程并发的时候，如何控制子协程退出，使用Context中的WithTimeout超时自动取消协程。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctx, _ := context.WithTimeout(context.Background(), timeout)</span><br><span class="line"><span class="comment">//超出设定时间，会自动往ctx.Done管道发送消息</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）WithCancel 手动取消方法，在结束的地方调用Cancel函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="number">1</span></span><br><span class="line">    b := <span class="number">2</span></span><br><span class="line">    ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">        cancel()<span class="comment">// 在调用处主动取消</span></span><br><span class="line">    &#125;()</span><br><span class="line">    res := Add(ctx, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Compute: %d+%d, result: %d\n&quot;</span>, a, b, res)</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>ETCD</strong></li></ol><p>（1）配置中心：发布订阅，监听是否有进程监听tcp端口，并通过名字查找和连接</p><p>（2）分布式锁：保持独占(CompareAndSwap)，控制时序</p><p>（3）服务发现：找到对方建立连接</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
